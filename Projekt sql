-- Projekt 1 - SQL
-- 1. Stwórz Bazę „Sklep odzieżowy”
create database Sklep_Odziezowy;
use Sklep_Odziezowy;
-- 2. Utwórz tabelę „Producenci” z kolumnami:

-- id producenta
-- nazwa producenta
-- adres producenta
-- nip producenta
-- data podpisania umowy z producentem
-- Do każdej kolumny ustaw odpowiedni „constraint”
create table Producenci (
ID_Producenta  integer Primary key not null,
nazwa_producenta text not null ,
adres_producenta text not null , 
nip_producenta integer ,
data_podpisania_umowy_z_producentem date);
insert into Producenci
values (1,	'Adidas',	'Akacjowa_22', 32421237, '2020-08-13'),
(2,	'Nike',	'Jaskólcza_33',		0864366534, '2022-07-01' ),
(3,	'Reebok',	'Betonowa_88', 54897334, '2021-11-09'),
(4,	'NewBalance', 'Polarowa_66', 84332875, '2020-09-21');
 drop table Producenci;

-- 3. Utwórz tabelę „Produkty” z kolumnami:

-- id produktu
-- id producenta
-- nazwa produktu
-- opis produktu
-- cena netto zakupu
-- cena brutto zakupu
-- cena netto sprzedaży
-- cena brutto sprzedaży
-- procent VAT sprzedaży
-- Do każdej kolumny ustaw odpowiedni „constraint”

create table Produkty (
Id_produktu integer Primary Key not null,
id_producenta integer,constraint producenci_fk foreign key (id_producenta) references Producenci(id_producenta),
nazwa_produktu text,
opis_produktu text,
cena_netto_zakupu integer,
cena_netto_sprzedazy integer,
cena_brutto_sprzedazy integer, 
procent_VAT_sprzedazy integer );
drop table produkty;


INSERT INTO Produkty (Id_produktu, id_producenta, nazwa_produktu, opis_produktu, cena_netto_zakupu, cena_netto_sprzedazy, cena_brutto_sprzedazy, procent_VAT_sprzedazy) VALUES
(1, 1, 'Koszulka', 'Biała koszulka bawełniana', 30.00, 50.00, 61.50, 23),
(2, 1, 'Spodnie', 'Niebieskie jeansy', 70.00, 120.00, 147.60, 23),
(3, 2, 'Bluza', 'Czarna bluza z kapturem', 50.00, 80.00, 98.40, 23),
(4, 2, 'Kurtka', 'Zimowa kurtka puchowa', 200.00, 300.00, 369.00, 23),
(5, 3, 'Sukienka', 'Czerwona sukienka wieczorowa', 90.00, 150.00, 184.50, 23),
(6, 3, 'Sweter', 'Wełniany sweter', 60.00, 90.00, 110.70, 23),
(7, 4, 'Szalik', 'Ciepły szalik', 25.00, 40.00, 49.20, 23),
(8, 4, 'Czapka', 'Zimowa czapka', 20.00, 30.00, 36.90, 23),
(9, 2, 'Rękawiczki', 'Skórzane rękawiczki', 45.00, 70.00, 86.10, 23),
(10, 2, 'Buty', 'Sportowe buty', 150.00, 200.00, 246.00, 23),
(11, 3, 'Koszula', 'Elegancka koszula', 60.00, 100.00, 123.00, 23),
(12, 1, 'Spódnica', 'Krótka spódnica', 35.00, 60.00, 73.80, 23),
(13, 4, 'Marynarka', 'Marynarka męska', 150.00, 250.00, 307.50, 23),
(14, 2, 'Krawat', 'Jedwabny krawat', 25.00, 45.00, 55.35, 23),
(15, 1, 'Płaszcz', 'Jesienny płaszcz', 120.00, 180.00, 221.40, 23),
(16, 4, 'Skarpetki', 'Bawełniane skarpetki', 12.00, 20.00, 24.60, 23),
(17, 3, 'T-shirt', 'T-shirt z nadrukiem', 20.00, 35.00, 43.05, 23),
(18, 4, 'Legginsy', 'Sportowe legginsy', 30.00, 55.00, 67.65, 23),
(19, 1, 'Kamizelka', 'Kamizelka puchowa', 80.00, 130.00, 159.90, 23),
(20, 2, 'Szorty', 'Letnie szorty', 45.00, 75.00, 92.25, 23);
select * from Produkty;


-- 4. Utwórz tabelę „Zamówienia” z kolumnami:

-- id zamówienia
-- id klienta
-- id produktu
-- Data zamówienia
-- Do każdej kolumny ustaw odpowiedni „constraint”
create table Zamówienia (
ID_Zamówienia  integer Primary key,
Id_klienta integer,constraint klienci_fk FOREIGN KEY (id_klienta) references Klienci (ID_Klienta),
id_produktu integer,constraint Produkty_fk FOREIGN KEY (id_produktu) references Produkty (id_produktu),
Data_zamówienia date );
INSERT INTO Zamówienia (ID_Zamówienia, Id_klienta, id_produktu, Data_zamówienia) VALUES
(1, 1, 1, '2024-07-01'),
(2, 2, 2, '2024-07-01'),
(3, 3, 2, '2024-02-03'),
(4, 4, 4, '2024-09-04'),
(5, 5, 5, '2024-07-01'),
(6, 6, 6, '2024-02-06'),
(7, 7, 7, '2024-06-07'),
(8, 8, 2, '2024-07-08'),
(9, 9, 9, '2024-06-09'),
(10, 10, 10, '2024-07-10');



-- 5. Utwórz tabelę „Klienci” z kolumnami:

-- id klienta
-- imię
-- nazwisko
-- adres
-- Do każdej kolumny ustaw odpowiedni „constraint”

create table Klienci (
Id_klienta  integer Primary key, 
Imie text,
Nazwisko text,
adres text);
INSERT INTO Klienci (Id_klienta, Imie, Nazwisko, adres) VALUES
(1, 'Jan', 'Kowalski', 'Warszawa, ul. Kwiatowa 10' ),
(2, 'Anna', 'Nowak', 'Kraków, ul. Zielona 5' ),
(3, 'Piotr', 'Wiśniewski', 'Gdańsk, ul. Morawska 12'),
(4, 'Katarzyna', 'Wójcik', 'Poznań, ul. Słoneczna 8' ),
(5, 'Tomasz', 'Kowalczyk', 'Wrocław, ul. Leśna 3' ),
(6, 'Agnieszka', 'Kamińska', 'Łódź, ul. Polna 7'),
(7, 'Michał', 'Lewandowski', 'Szczecin, ul. Długa 15'),
(8, 'Ewa', 'Zielińska', 'Lublin, ul. Krótka 9'),
(9, 'Marcin', 'Szymański', 'Bydgoszcz, ul. Wąska 4'),
(10, 'Magdalena', 'Dąbrowska', 'Katowice, ul. Główna 2');
drop table klienci;
select * from Klienci;
use sklep_odziezowy;
-- 6. Połącz tabele ze sobą za pomocą kluczy obcych:

-- Produkty – Producenci
-- Zamówienia – Produkty
-- Zamówienia - Klienci




-- 7. Każdą tabelę uzupełnij danymi wg:

-- Tabela „Producenci” – 4 pozycje
-- Tabela „Produkty” – 20 pozycji
-- Tabela „Zamówienia” – 10 pozycji
-- Tabela „Klienci” – 10 pozycji
-- 8. Wyświetl wszystkie produkty z wszystkimi danymi od producenta który znajduje się na pozycji 1 w tabeli „Producenci”
SELECT Produkty.*, Producenci.*
FROM Produkty
JOIN Producenci ON Produkty.id_producenta = Producenci.id_producenta
WHERE Producenci.id_producenta = 1;


-- 9. Posortuj te produkty alfabetycznie po nazwie
SELECT Produkty.*, Producenci.*
FROM Produkty
JOIN Producenci ON Produkty.id_producenta = Producenci.id_producenta
WHERE Producenci.id_producenta = 1
ORDER BY Produkty.nazwa_produktu ASC;

-- 10. Wylicz średnią cenę za produktu od producenta z pozycji 1

SELECT avg(Produkty.Cena_netto_zakupu) as średnia_cena
FROM Produkty
JOIN Producenci ON Produkty.id_producenta = Producenci.id_producenta
WHERE Producenci.id_producenta = 1;



-- 11. Wyświetl dwie grupy produktów tego producenta:

-- Połowa najtańszych to grupa: „Tanie”
-- Pozostałe to grupa: „Drogie”




SELECT
    nazwa_produktu,
    cena_netto_zakupu,
    CASE
        WHEN RowNum <= TotalCount / 2 THEN 'Tanie'
        ELSE 'Drogie'
    END AS Grupa
FROM (
    SELECT 
        nazwa_produktu,
        cena_netto_zakupu,
        @rownum := @rownum + 1 AS RowNum,
        (SELECT COUNT(*) FROM Produkty WHERE id_producenta = 1) AS TotalCount
    FROM Produkty, (SELECT @rownum := 0) AS r
    WHERE id_producenta = 1
    ORDER BY cena_netto_sprzedazy ASC
) AS Policzone_produkty;

-- 12. Wyświetl produkty zamówione, wyświetlając tylko ich nazwę
SELECT p.nazwa_produktu
FROM Zamówienia z
JOIN Produkty p ON z.id_produktu = p.id_produktu;

-- 13. Wyświetl wszystkie produkty zamówione – ograniczając wyświetlanie do 5 pozycji
SELECT *
FROM zamówienia z
JOIN produkty p ON z.id_produktu = p.id_produktu
LIMIT 5;


-- 14. Policz łączną wartość wszystkich zamówień
SELECT sum(p.cena_netto_zakupu) as Suma_wszystkich_zamówień_zakupu_netto,
sum(p.cena_netto_sprzedazy) as Suma_wszystkich_zamówień_sprzedaży_netto,
sum(p.cena_brutto_sprzedazy)  as Suma_wszystkich_zamówień_sprzedaży_brutto
FROM zamówienia z
JOIN produkty p ON z.id_produktu = p.id_produktu;

-- 15. Wyświetl wszystkie zamówienia wraz z nazwą produktu sortując je wg daty od najstarszego do najnowszego
select z.id_zamówienia,
p.id_produktu,
p.nazwa_produktu,
z.data_zamówienia
from zamówienia z
join produkty p ON z.id_produktu = p.id_produktu
order by z.data_zamówienia
ASC;
-- 16. Sprawdź czy w tabeli produkty masz uzupełnione wszystkie dane – wyświetl pozycje dla których brakuje danych
SELECT *
FROM Produkty
WHERE id_produktu IS NULL OR
    id_producenta IS NULL OR
    nazwa_produktu IS NULL OR
    opis_produktu IS NULL OR
    cena_netto_zakupu IS NULL OR
    cena_netto_sprzedazy IS NULL OR
    cena_brutto_sprzedazy IS NULL OR
    procent_VAT_sprzedazy IS NULL;
    
    

    
-- 17. Wyświetl produkt najczęściej sprzedawany wraz z jego ceną
SELECT 
    p.nazwa_produktu, 
    p.cena_netto_sprzedazy,
    COUNT(z.id_produktu) AS liczba_sprzedazy
FROM 
    Zamówienia z
JOIN 
    Produkty p ON z.id_produktu = p.id_produktu
GROUP BY 
    z.id_produktu, p.nazwa_produktu, p.cena_netto_sprzedazy
ORDER BY 
    liczba_sprzedazy DESC
LIMIT 1;

-- 18. Znajdź dzień w którym najwięcej zostało złożonych zamówień

SELECT 
    z.data_zamówienia,
    count(z.data_zamówienia) as liczba_zamówień
FROM 
    Zamówienia z
JOIN 
    Produkty p ON z.id_produktu = p.id_produktu
GROUP BY 
   z.data_zamówienia
ORDER BY 
liczba_zamówień DESC
LIMIT 1;
